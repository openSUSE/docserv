#!/usr/bin/env python3

__version__ = "0.1.0"
__author__ = "Tom Schraitle <tom@suse.de>"

import argparse
from pathlib import Path
import re
import sys
import tempfile

import jinja2

PROG=Path(__file__)
SCRIPTDIR=PROG.parent
JAVA_FLAGS="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"
POSSIBLE_LANGS = tuple(
    "ar-ar,cs-cz,de-de,en-us,es-es,fr-fr,hu-hu,it-it,"
    "ja-jp,ko-kr,nl-nl,pl-pl,pt-br,ru-ru,sv-se,zh-cn,zh-tw".split(",")
)
TEMPLATE_DEFAULT=""
TEMPLATE_PRODUCT=""
# Where to place the JSON data files
data_path='docserv/data'
# Where to place the template's resource files (JS, CSS, images)
res_path='docserv/res/'
# Where to place fragment files
fragment_path='docserv/fragments'
#
enable_ssi_fragments=0


class LanguageAction(argparse.Action):
    """Parse action for languages (option --langs).

    Languages can be separated by comma
    """
    LANG_REGEX = re.compile(r'^([a-z]{2}-[a-z]{2}[, ])*[a-z]{2}-[a-z]{2}$')
    def __call__(self, parser, namespace, values, option_string=None):
        if type(self).LANG_REGEX.match(values):
            languages = re.split("[,; ]", values)
        else:
            parser.error(
                "Wrong syntax. "
                "Each languages must to be in the format '[a-z]{2}-[a-z]{2}'. "
                "More than one language need to be separated by commas."
            )
        # Check the values of the language itself to avoid typos
        invalid_langs = set(languages) - set(POSSIBLE_LANGS)
        if invalid_langs:
            parser.error(
                f"Invalid language(s): {', '.join(invalid_langs)}\n"
                f"(choose from {', '.join(POSSIBLE_LANGS)})"
            )
        if len(languages) != len(set(languages)):
            parser.error("Each language can occur only once")

        setattr(namespace, self.dest, languages)


class SeparateAction(argparse.Action):
    SEP_REGEX = re.compile(r'[ ,;]')
    def __call__(self, parser, namespace, values, option_string=None):
        if type(self).SEP_REGEX.search(values):
            v = [ _ for _ in type(self).SEP_REGEX.split(values) if _.strip() ]
        else:
            parser.error(
                "Wrong syntax. "
                "Each part must be separated by comma, semicolon, or space."
            )
        setattr(namespace, self.dest, v)


def parse_cli(cliargs=None) -> argparse.Namespace:
    """Parse CLI with :class:`argparse.ArgumentParser` and return parsed result

    :param cliargs: Arguments to parse or None (=use sys.argv)
    :return: parsed CLI result
    """
    parser = argparse.ArgumentParser(
        description=__doc__,
        epilog="Version %s written by %s " % (__version__, __author__),
    )

    parser.add_argument("--stitched-config",
                        required=True,
                        type=Path,
                        action="store",
                        help="Full docservconfig file (positive version)"
    )
    parser.add_argument("--template-dir",
                        required=True,
                        type=Path,
                        action="store",
                        help="Path to the template directory"
    )
    parser.add_argument("--cache-dir",
                        required=True,
                        type=Path,
                        help="Document metadata cache directory as generated by docserv script."
    )
    parser.add_argument("--output-dir",
                        required=True,
                        type=Path,
                        action="store",
                        help="Where to output HTML files"
    )
    parser.add_argument("--ui-languages",
                        required=True,
                        action=LanguageAction,
                        help="Languages that are supported by the UI templates"
    )
    parser.add_argument("--default-ui-language",
                        required=True,
                        action="store",
                        help="Default language of UI translations, used to find fallback translations."
    )
    parser.add_argument("--site-sections",
                        required=True,
                        # action="store",
                        action=SeparateAction,
                        help="Site sections that are supported"
    )
    parser.add_argument("--default-site-section",
                        required=True,
                        action="store",
                        help="Default site section, also used as the fallback"
    )
    parser.add_argument("--omit-lang-path",
                        required=True,
                        action="store",
                        help="Allows omitting the path component to the default page language"
    )
    parser.add_argument("--product",
                        required=True,
                        action="store",
                        help="Product to build UI for"
    )
    parser.add_argument("--docset",
                        required=True,
                        action="store",
                        help="Docset to build UI for"
    )
    parser.add_argument("--base_path",
                        required=True,
                        type=Path,
                        action="store",
                        help="Relative path to the root of the docserv2 directory on the host"
    )
    # Optional arguments
    parser.add_argument("--internal-mode",
                        action="store_true",
                        help="Enable features that are not supposed to be shown publically"
    )
    parser.add_argument("--fragment-dir",
                        action="store",
                        type=Path,
                        help="Directory for translatable SSI fragments"
    )
    parser.add_argument("--fragment-l10n-dir",
                        action="store",
                        type=Path,
                        help="Directory path for fragment translations (mandatory if previous parameter is set)"
    )

    # Parsing the arguments:
    args = parser.parse_args(args=cliargs)
    prepare(args)

    return args


def prepare(args: argparse.Namespace):
    """
    """
    if args.fragment_dir:
        enable_ssi_fragments = 1

    if not args.cache_dir.exists():
        args.cache_dir.mkdir(parents=True, exist_ok=True)


def main(cliargs=None):
    try:
        args = parse_cli(cliargs)
        print("Script:", PROG)
        print("Directory:", SCRIPTDIR)
        print(args)

        with tempfile.TemporaryDirectory(dir="/tmp",
                                         prefix="docserv-build-navigation-"
                                        ) as temp_dir:
            pass

    except Exception as exc:
        print("Error %s" % exc, file=sys.stderr)


if __name__ == "__main__":
    sys.exit(main())