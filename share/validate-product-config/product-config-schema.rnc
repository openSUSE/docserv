# RELAX NG Schema for DocservÂ² product configuration

# BASICS

default namespace = ""
start = ds.product


# CONSTANTS

# Whenever there is a backward-incompatible schema revision, bump this
# version to the version of the software itself that this schema is shipped
# with. If the schema remains backward-compatible and there are only minor
# changes, leave the version as is.
ds.schema.version = "4.0"


# TYPES

ds.type.class =
  ## A space-separated list of HTML classes
  xsd:token { pattern = "[\-_\+\.a-zA-Z0-9]+( [\-_\+\.a-zA-Z0-9]+)*" }

ds.type.email =
  # http://www.dpawson.co.uk/relaxng/schema/datatypes/datatypes.html#d1034e184
  # Works for both normal addresses and forms like
  # "David Tolpin"@[Obscure Place]
  # The expression above is slightly more allowing than required,
  # but should be appropriate for the majority of cases.
  xsd:token {
    pattern="""([a-zA-Z0-9!#$%&'*+\-/=?\^_`{|}~]+(\.[a-zA-Z0-9!#$%&'*+\-/=?\^_`{|}~]+)*|"[^"\\]*")@([a-zA-Z0-9!#$%&'*+\-/=?\^_`{|}~]+(\.[a-zA-Z0-9!#$%&'*+\-/=?\^_`{|}~]+)*|\[[^\[\]\\]*\])"""
  }

ds.type.lang =
  # A language code
  xsd:token {
    pattern="""[a-z]{2}(-[a-z]{2,8})?"""
  }

ds.type.gitremote =
  # URL to a Git remote
  # (Let's not support SSH URLs for the moment since that needs authentication)
  xsd:anyURI {
    pattern="""https?://.*"""
  }

ds.type.dirname =
  # A relative directory name
  xsd:anyURI {
    pattern="""[^/\\]+(/[^/\\]+)*"""
  }

ds.type.branch =
  # A Git branch name
  xsd:token {
    pattern="""[^\s\\]+"""
  }

ds.type.dcfile =
  # A DC file name
  xsd:anyURI {
    pattern="""DC-[\-_\.\+a-zA-Z0-9]+"""
  }

ds.type.xsltparam =
  # An XSLT parameter name
  xsd:token {
    pattern="""[\-_\.\+a-zA-Z0-9]+"""
  }

ds.type.id =
  # An ID (however, we do not check for uniqueness via RNC -- we check in
  # docserv-stitch)
  xsd:token {
    pattern="""[\-_\.\+a-zA-Z0-9]+"""
  }

ds.type.idmulti =
  # A space-separated list of IDs (we do not check via RNC -- we check in
  # docserv-stitch)
  xsd:token {
    pattern="""([\-_\.\+a-zA-Z0-9]+ )*[\-_\.\+a-zA-Z0-9]+"""
  }

ds.type.containerref =
  # A reference to a remote container image, matches the expression used by
  # daps2docker
  xsd:token {
    pattern="""[\-_\.a-zA-Z0-9]+(/[\-_\.a-zA-Z0-9]+)*(:[\-_\.a-zA-Z0-9]+)?"""
  }

ds.type.hexdigest =
  # A hash/hex digest
  xsd:token {
    pattern="""[a-f0-9]{7,}"""
  }

# A basic title template that allows strings like "title subtitle product/docset",
# in exactly that order, but everything except the title can be
# left away. product and docset will in many cases just be the same, and thus
# are set up to exclude each other.
# There is no guarantee that the title string will be formatted
# exactly this way or in this order, just that, if available, all of the
# information requested will come out.
ds.type.titleformat.build = "title" | "title docset" | "title product" | "title subtitle" | "title subtitle product" | "title subtitle docset"
# For external links, some metadata is never available: product name and
# subtitle cannot be generated in any way currently (but you're free to
# create whatever title you want and that should make up for it).
ds.type.titleformat.link = "title" | "title docset"

ds.false.enum = "0" | "false"
ds.true.enum = "1" | "true"

# TAG/ATTRIBUTE SETS

div
{
# FIXME: add img? (It is a bit unclear whether our script would need to take
# care of copying stuff then.)
ds.htmlblock =
  ds.p
  | ds.div
  | ds.pre
  | ds.ul
  | ds.ol
  | ds.dl
  | ds.h1
  | ds.h2
  | ds.h3
  | ds.h4
  | ds.h5
  | ds.h6
}

div
{
ds.htmlinline =
    ds.sup
  | ds.u
  | ds.cite
  | ds.span
  | ds.s
  | ds.a
  | ds.sub
  | ds.strong
  | ds.em
  | ds.q
  | ds.code
  | ds.br
  | ds.hr
}

div
{
ds.htmlattr =
  attribute id { xsd:ID }?,
  attribute class { ds.type.class }?
}

div
{
ds.htmlinlinecontent =
  ds.htmlattr,
  (ds.htmlinline |
  text)*
}



# ROOT

ds.product =
  element product {
    # This ID value can only be checked when we take all of the productconfig
    # files together (i.e. after we have run stitch.sh). In any case, it does
    # not make sense to use xsd:id here because there can only ever be one
    # of these ID per productconfig file.
    attribute productid { ds.type.id },
    attribute schemaversion { ds.schema.version },
    attribute navigation-visible { "visible" | "hidden" }?,
    attribute enabled { xsd:boolean }?,
    ds.name,
    ds.sortname?,
    ds.acronym?,
    ds.maintainers,
    ds.category*,
    ds.desc_default,
    ds.desc_translation*,
    ds.docset+
  }


# PRODUCT DESCRIPTION

ds.name =
  element name {
    text
  }

ds.sortname =
  element sortname {
    text
  }

ds.acronym =
  element acronym {
    text
  }

ds.maintainers =
  element maintainers {
    ds.contact+
  }

ds.contact =
  element contact {
    ds.type.email
  }

ds.desc_default =
  element desc {
    attribute lang { ds.type.lang },
    attribute default { ds.true.enum },
    ds.htmlblock+
  }

ds.desc_translation =
  element desc {
    attribute lang { ds.type.lang },
    attribute default { ds.false.enum }?,
    ds.htmlblock*
  }

ds.category =
  element category {
    attribute categoryid { ds.type.id }?,
    ds.categorylanguage_default,
    ds.categorylanguage_translation*
  }

ds.categorylanguage_default =
  element language {
    attribute lang { ds.type.lang },
    attribute default { ds.true.enum },
    attribute title { text },
    ds.htmlblock*
  }
ds.categorylanguage_translation =
  element language {
    attribute lang { ds.type.lang },
    attribute default { ds.false.enum }?,
    attribute title { text },
    ds.htmlblock*
  }


# DOCSETS

ds.docset =
  element docset {
    attribute setid { ds.type.id },
    attribute lifecycle { "unpublished" | "beta" | "supported" | "unsupported" },
    attribute navigation-visible { "visible" | "hidden" }?,
    # To allow for name changes between versions, as in the example of SUSE
    # Cloud -> SUSE OpenStack Cloud: optional ds.name here
    ds.name?,
    ds.sortname?,
    ds.acronym?,
    ds.version,
    (
      (ds.builddocs,
       ds.internal?,
       ds.external?) |
      (ds.internal,
       ds.external?) |
      ds.external
    )
  }

ds.version =
  element version {
    text
  }

ds.builddocs =
  element builddocs {
    ds.git,
    ds.buildcontainer?,
    ds.language_default,
    (
     ds.language_translation_list |
     ds.language_translation_full
    )*
  }

ds.git =
  element git {
    attribute remote { ds.type.gitremote },
    empty
  }

ds.buildcontainer =
  element buildcontainer {
    attribute image { ds.type.hexdigest | ds.type.containerref },
    empty
  }

# About @translation-type:
# * "list" creates a list of documents that will be built for the
#   translation in question. This is advantageous in the common case that only
#   a small subset of documents are translated into a particular language.
# * "full" means there is a full translation in this language for
#   this docset

ds.language_default =
  element language {
    attribute lang { ds.type.lang },
    attribute default { ds.true.enum },
    ds.branch,
    ds.subdir?,
    (
     ds.deliverable |
     ds.deliverable_subdeliverable
    )+
  }
ds.language_translation_list =
  element language {
    attribute lang { ds.type.lang },
    attribute default { ds.false.enum }?,
    attribute translation-type { "list" },
    ds.branch?,
    ds.subdir?,
    ds.deliverablerestricted+
  }
ds.language_translation_full =
  element language {
    attribute lang { ds.type.lang },
    attribute default { ds.false.enum }?,
    attribute translation-type { "full" },
    ds.branch?,
    ds.subdir?
  }


ds.branch =
  element branch {
    ds.type.branch
  }

ds.subdir =
  element subdir {
    ds.type.dirname
  }

ds.deliverable =
  element deliverable {
    attribute remarks { xsd:boolean }?,
    attribute draft { xsd:boolean }?,
    attribute meta { xsd:boolean }?,
    attribute category { ds.type.idmulti }?,
    attribute titleformat { ds.type.titleformat.build }?,
    ds.subdir?,
    ds.dc,
    ds.format+,
    ds.param*
  }

ds.deliverable_subdeliverable =
  element deliverable {
    attribute remarks { xsd:boolean }?,
    attribute draft { xsd:boolean }?,
    attribute meta { xsd:boolean }?,
    ds.subdir?,
    ds.dc,
    ds.format+,
    ds.param*,
    ds.subdeliverable+
  }

ds.dc =
  element dc {
    ds.type.dcfile
  }

# Unfortunately, this way, I can't force people to choose at least one format
# they actually want to build.
ds.format =
  element format {
    attribute html { xsd:boolean }?,
    attribute single-html { xsd:boolean }?,
    attribute pdf { xsd:boolean }?,
    attribute epub { xsd:boolean }?
  }

ds.param =
  element param {
    attribute name { ds.type.xsltparam },
    text
  }


ds.subdeliverable =
  element subdeliverable {
    attribute category { ds.type.idmulti }?,
    attribute titleformat { ds.type.titleformat.build }?,
    ds.type.id
  }

ds.deliverablerestricted =
  element deliverable {
    ds.subdir?,
    ds.dc,
    ds.subdeliverablerestricted*
  }

ds.subdeliverablerestricted =
  element subdeliverable {
    ds.type.id
  }

ds.internal =
  element internal {
    ds.ref+
  }

# The following definition is a bit complicated, so -- the intention is to
# allow links to either of:
# * a specific product (i.e. show the most recent product revision, link will
#   only support the current UI language)
# * a specific docset (link will only support the current UI language)
# * a specific deliverable (by DC), subdeliverable (by DC and rootid), or an
#   external link (by link ID)
ds.ref =
  element ref {
    attribute product { ds.type.id },
    (attribute docset { ds.type.id }? |
      (attribute docset { ds.type.id },
        (
          (attribute dc { ds.type.id },
           attribute subdeliverable { ds.type.id }?,
           attribute titleformat { ds.type.titleformat.build }?) |
          (attribute link { ds.type.id },
           attribute titleformat { ds.type.titleformat.link }?)
        )
      )
    ),
    attribute category { ds.type.idmulti }?,
    empty
  }

ds.external =
  element external {
    ds.link*
  }

ds.link =
  element link {
    attribute linkid { ds.type.id }?,
    attribute category { ds.type.idmulti }?,
    attribute titleformat { ds.type.titleformat.link }?,
    ds.linklanguage_default,
    ds.linklanguage_translation*
  }

ds.linklanguage_default =
  element language {
    attribute lang { ds.type.lang }?,
    attribute default { ds.true.enum },
    attribute title { text },
    ds.url+
  }

ds.linklanguage_translation =
  element language {
    attribute lang { ds.type.lang }?,
    attribute default { ds.false.enum }?,
    attribute title { text },
    ds.url+
  }

ds.url =
  element url {
    attribute href { xsd:anyURI },
    attribute format { "html" | "single-html" | "pdf" | "epub" | "zip" | "tar" | "other" },
    empty
  }


# SUPPORTED HTML SUBSET

ds.p =
  element p {
    ds.htmlinlinecontent
  }

ds.div =
  element div {
    ds.htmlattr,
    (
      ds.htmlinline |
      ds.htmlblock |
      text
    )*
  }

ds.pre =
  element pre {
    ds.htmlattr,
    text*
  }

ds.ul =
  element ul {
    ds.htmlattr,
    ds.li+
  }

ds.ol =
  element ol {
    ds.htmlattr,
    ds.li+
  }

ds.dl =
  element dl {
    ds.htmlattr,
    (ds.dt, ds.dd)+
  }

ds.dt =
  element dt {
    ds.htmlattr,
    ds.htmlblock*
  }

ds.dd =
  element dd {
    ds.htmlattr,
    ds.htmlblock*
  }

ds.li =
  element li {
    ds.htmlattr,
    ds.htmlblock*
  }

ds.h1 =
  element h1 {
    ds.htmlinlinecontent
  }

ds.h2 =
  element h2 {
    ds.htmlinlinecontent
  }

ds.h3 =
  element h3 {
    ds.htmlinlinecontent
  }

ds.h4 =
  element h4 {
    ds.htmlinlinecontent
  }

ds.h5 =
  element h5 {
    ds.htmlinlinecontent
  }

ds.h6 =
  element h6 {
    ds.htmlinlinecontent
  }


ds.sup =
  element sup {
    ds.htmlinlinecontent
  }

ds.sub =
  element sub {
    ds.htmlinlinecontent
  }

ds.s =
  element s {
    ds.htmlinlinecontent
  }

ds.u =
  element u {
    ds.htmlinlinecontent
  }

ds.q =
  element q {
    ds.htmlinlinecontent
  }

ds.em =
  element em {
    ds.htmlinlinecontent
  }

ds.a =
  element a {
    attribute href { xsd:anyURI },
    attribute target { "_blank" }?,
    attribute rel { "nofollow" | "prev" | "next" | "license" | "alternate" }?,
    ds.htmlinlinecontent
  }

ds.strong =
  element strong {
    ds.htmlinlinecontent
  }

ds.code =
  element code {
    ds.htmlinlinecontent
  }

ds.cite =
  element cite {
    ds.htmlinlinecontent
  }

ds.span =
  element span {
    ds.htmlinlinecontent
  }

ds.br =
  element br {
    ds.htmlattr,
    empty
  }

ds.hr =
  element hr {
    ds.htmlattr,
    empty
  }
