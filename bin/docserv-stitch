#!/bin/bash
# Validate productconfig files from a directory one by one, then stitch them
# together, so the docserv script can build from them.
#
# Arguments (in order of appearance):
# --valid-languages="en-us ..."   # Space-separated list of valid language codes
#
# --valid-site-sections="..."     # Space-separated list of valid sections
#
# --product-config-schema="..."   # The RNC schema file to validate config files with Jing
#
# --checks-dir="..."              # Directory of all the check files (.sh/.xslt)
#                                 # Defaults $share_dir/validate-product-config/checks
#
# --simplify                      # Simplify user-generated productconfig so the
#                                 # docserv daemon can use it (optional)
#
# --revalidate-only               # If a file named of the same name as the
#                                 # output file already exists and it contains a
#                                 # <hashes/> section matching the current MD5
#                                 # sums of the XML files in the input directory,
#                                 # do not do a complete validation
#
# --spinner                       # Show a spinner while working, if you or your
#                                 # CI are impatient and eager to kill processes
#
# --target                        # The target server
#
# INPUT_DIR                       # Directory with config files
# OUTPUT_FILE                     # Output file name (parent directory must exist)
#                                 # (optional; if not specified, this will only
#                                 # validate the configuration)
#
# XML tool deps: xmlstarlet, jing, xmllint, xsltproc

out() {
  >&2 echo -e "ERROR: $1"
  exit 1
}

source $(which env_parallel.bash) || out "Package 'gnu_parallel' is missing"
# env_parallel --session

me=$(test -L $(realpath $0) && readlink $(realpath $0) || echo $(realpath $0))
PROG=${me##*/}
mydir=${me%/*}

source $mydir/docserv-dirs

app_help() {
  sed -rn '/#!/{n; p; :loop n; p; /^[ \t]*$/q; b loop}' $me | sed -r -e 's/^# ?//' -e "s/\\\$0/$(basename $0)/"
  exit
}

add_issue() {
  # we apply "fold" only to the first line, under the assumption that that is
  # the prose issue description while all the rest is assumed to not be foldable
  # (xml errors and such)
  issuelist+="\n\n- "$(echo -e "$1" | head -1 | fold -s -w 78 | sed '2,${s/^ */  /}')
  [[ $(echo -e "$1" | wc -l) -gt 1 ]] && issuelist+='\n'$(echo -e "$1" | tail -n +2 | sed 's/^/  /')
}

add_multiple_issues() {
  affected_file="$1"
  issues="$2\n---"

  issue=''
  while read line; do
    if [[ "$line" == '---' ]] && [[ "$issue" ]]; then
      add_issue "$affected_file: $issue"
      issue=''
    elif [[ $(echo "$line" | sed 's/[ \t]//g') ]]; then
      issue+="$line\n"
    fi
  done < <(echo -e "$issues")
}

# Mostly because we need to put something random on screen when running within
# CI, so we don't get killed for inactivity
spin() {
  [[ "$enable_spinner" -eq 0 ]] && return

  if [[ "$1" == 'clear' ]]; then
    echo -e '\b '
    return
  fi

  if [[ "$spinstate" == '/' ]]; then spinstate='-'
  elif [[ "$spinstate" == '-' ]]; then spinstate='\'
  elif [[ "$spinstate" == '\' ]]; then spinstate='|'
  else spinstate='/'
  fi

  echo -ne "\b$spinstate"
}

JOBS=25
TARGET=""
DATE=$(date +"%Y-%m-%d")
xmllint='xmllint'
jing='jing'
starlet='xmlstarlet'

stacksize=${stacksize:-"-Xss4096K"}

schema_file=$share_dir/validate-product-config/product-config-schema.rnc
checks_dir=$share_dir/validate-product-config/checks
references_stylesheet=$share_dir/validate-product-config/global-check-ref-list.xsl
simplify_stylesheet=$share_dir/simplify-product-config/simplify.xsl

simplify_config=0
enable_spinner=0
revalidate=0
valid_languages=""
valid_site_sections=""
input_dir=""
output_file=""
DEBUG=1


function debug() {
  [[ $DEBUG -gt 0 ]] && 2>&1 echo -e "INFO: $1"
}


function validate_config() {
  local file=$1

  2>&1 echo "[$PARALLEL_SEQ] validating file $file..."

  # (2) Validate file
  valid=$(2>&1 ADDITIONAL_FLAGS="$java_flags" ADDITIONAL_OPTIONS="$java_flags" \
  jing -ci $schema_file $file)
  [[ $? -gt 0 ]] && out "$input_dir/$file: File is not valid:\n$valid"
  # spin

  # (3) Check optional "/product/@enabled" attribute
  enabled=$(xmlstarlet sel -t -v "/product/@enabled" $file)
  if [[ "$enabled" == 'false' ]] || [[ "$enabled" == '0' ]]; then
    >&2 echo "File $file was not enabled"
    return
  fi
}


function check_config() {
  local file=$1
  local check_file=$2
  local command='bash'
  local _x
  local java_flags="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"
  # local tmpfile=$(mktemp --tmpdir=/tmp "docserv-stitch-check_config-result-XXXX")

  _x=${check_file##*/}
  _x=${_x%*.xsl}
  2>&1 echo "check_config [$PARALLEL_SEQ]: $file ${check_file##*/}"
  # 2>&1 echo ">> $TMPCONFIGDIR/${file##*/}"

  [[ $check_file =~ \.xsl$ ]] && command='xsltproc'
  # result=$( \
  #      xmllint="xmllint" jing="jing" starlet="xmlstarlet" \
  #      valid_languages="$valid_languages_sorted" \
  #      valid_site_sections="$valid_site_sections_sorted" \
  #      $command $check_file $file
  #      )
  xmllint="xmllint" jing="jing" starlet="xmlstarlet" \
  valid_languages="$valid_languages_sorted" \
  valid_site_sections="$valid_site_sections_sorted" \
  $command $check_file $file 2> "$TMPCONFIGDIR/$_x-${file##*/}.result"
  # we are only interested in the bytes of the result file:
  result=$(stat --format="%s" "$TMPCONFIGDIR/$_x-${file##*/}.result")
 
  [[ $? -eq 0 ]] || out "Validation check file $check_file is misbehaving."
  # add_multiple_issues "$input_dir/$file" "$result"
  [[ "$result" -ne 0 ]] && out "Problem in $input_dir/$file: $TMPCONFIGDIR/$_x-${file##*/}.result" || true
}

function parsecli()
{
    # For details about getopt,
    # see https://www.tutorialspoint.com/unix_commands/getopt.htm
    local REST=()
    local options=$(getopt -n "$PROG" \
      -o vh \
      --long version,help,simplify,spinner,revalidate-only,product-config-schema:,valid-languages:,valid-site-sections:,checks-dir:,target: \
      -- "$@")
    [ $? -eq 0 ] || {
        echo "Incorrect option provided"
        exit 1
    }
    eval set -- "$options"
    while true; do
        case "$1" in
        -v)
            VERBOSE=$(($VERBOSE + 1))
            ;;
        -h|--help)
            app_help
            ;;
        --version)
            echo "$PROG $VERSION"
            exit
            ;;
        --simplify)
          simplify_config=1
          ;;
        --revalidate-only)
          revalidate=1
          ;;
        --spinner)
          enable_spinner=1
          ;;
        --valid-languages)
          valid_languages="$2"
          shift
          ;;
       --valid-site-sections)
          valid_site_sections="$2"
          shift
          ;;
       --product-config-schema)
          schema_file="$2"
          shift
          ;;
       --checks-dir=*)
          checks_dir="$2"
          shift
          ;;
        --target)
          TARGET="$2"
          shift
          ;;

        --)
            shift
            break
            ;;
        esac
        shift
    done
    # Remove script name:
    shift
    # Process positional parameters
    REST=( $@ )
    [[ ${#REST[@]} != 2 ]] && out "Expected two parameters. Missing INPUT_DIR and/or OUTPUT_FILE"

    echo "0=${REST[0]} 1=${REST[1]}"
    input_dir=$(readlink -f -- ${REST[0]})
    output_file=$(readlink -f -- ${REST[1]})

    if [[ ! -d $input_dir ]]; then
      out "Argument '$input_dir' is not a directory."
    fi
    if [[ ! -d ${output_file%/*} ]]; then
      out "Parent directory of '${output_file%/*}' does not exist."
    fi
    if [[ -z $TARGET ]]; then
      out "No target server specified."
    fi
}

## --------
parsecli $0 "$@"
debug "Args:\n  input_dir=$input_dir\n  output_file=$output_file"

# Sanity checks
[[ ! -f $schema_file ]] && out "Schema $schema_file does not exist.$(readme_message)"
[[ ! -d $checks_dir ]] && out "Directory $checks_dir does not exist.$(readme_message)"
[[ ! -f $simplify_stylesheet ]] && out "Stylesheet $simplify_stylesheet does not exist.$(readme_message)"


# FIXME: For --valid-languages and --valid-site-sections, we allow duplicated
# entries. This is benign, because we deduplicate them, but since it hints at a
# slightly b0rk config, we may not want to accept that.

# matches ds.type.lang in product-config-schema.rnc
# (([a-z]{2}(-[a-z]{2,8})?))$
[[ ! $(echo " $valid_languages" | grep -oP '^( +[a-z]{2}(-[a-z]{2,8})?)+$') ]] && \
  out "Language codes parameter string does not conform to scheme (must be la-ng scheme, space-separated)."

# matches ds.type.alphanumeric in product-config-schema.rnc
[[ ! $(echo " $valid_site_sections" | grep -oP '^( +[-_a-zA-Z0-9]+)+$') ]] && \
  out "Site sections parameter string does not conform to scheme (must be alphanumeric-_, space-separated)."

([[ "$simplify_config" -eq 1 ]] && [[ -z "$output_file" ]]) && \
  out "--simplify can only be used together with an OUTPUT_FILE parameter."

([[ "$revalidate" -eq 1 ]] && [[ -z "$output_file" ]]) && \
  out "--revalidate-only can only be used together with an OUTPUT_FILE parameter."

cd $input_dir

[[ ! $(ls *.xml 2>/dev/null) ]] && \
  out "There are no product configuration files."


valid_languages_sorted=''
[[ "$valid_languages" ]] && valid_languages_sorted=$(echo -e "$valid_languages" | tr ' ' '\n' | sort -u)
valid_site_sections_sorted=''
[[ "$valid_site_sections" ]] && valid_site_sections_sorted=$(echo -e "$valid_site_sections" | tr ' ' '\n' | sort -u)

issuelist=''


# Create md5 hashes for all config files. From the md5sum output, we are only
# keeping the hashes, as the file names of the config files are actually
# irrelevant.
#
# parallel -j 30 md5sum ::: *.xml sort | sed -r 's/\s*[^ ]+$//' | tr '\n' '!'
hashsums=$(md5sum *.xml | sort | sed -r 's/\s*[^ ]+$//' | tr '\n' '!')

if [[ "$revalidate" == '1' ]] && [[ -f $output_file ]]; then
  comparisonhashsums=$(xmlstarlet sel -t -v "(//hashes)[1]" $output_file)
  [[ "$comparisonhashsums" == "$hashsums" ]] && exit 0
fi

# ------------------------
debug "Start\n"
debug "Validate with $schema_file\n"
env_parallel ${JOBS:+-j$JOBS} --halt-on-error=soon,fail=3 validate_config ::: $input_dir/*.xml
[[ $? -eq 0 ]] || out "ERROR: Some config files are not valid."

debug "Config validation was fine."
debug "======================================="
debug "Checking each config file..."

# tmpoutfile=$(mktemp --tmpdir=/tmp $tmpoutfile)
tmpoutfile="/tmp/docserv-stitch-${DATE}-${TARGET}.xml"
# tmpoutfile="/tmp/$tmpoutfile"
# TMPCONFIGDIR=$(mktemp -d --tmpdir=/tmp docserv-stitch-tmpdir-XXXX)
TMPCONFIGDIR="/tmp/docserv-stitch-tmpdir-${DATE}/"
mkdir ${TMPCONFIGDIR} 2>/dev/null

cat << EOF > "$tmpoutfile"
<?xml version="1.0" encoding="UTF-8"?>
<docservconfig>
<hashes>${hashsums}</hashes>

EOF

# We want to exit when the first job fails.
env_parallel ${JOBS:+-j$JOBS} --halt-on-error=soon,fail=1  check_config ::: $input_dir/*.xml ::: $checks_dir/check-*.{sh,xsl}
[[ $? -eq 0 ]] || out "ERROR: There was one or more problems."

debug "Config checks were fine."

parallel ${JOBS:+-j$JOBS} --halt-on-error=now,fail=1 "xmlstarlet sel -t -c \"/*\" {} > $TMPCONFIGDIR/{/}" ::: $input_dir/*.xml
[[ $? -eq 0 ]] || out "ERROR: Problems with one config check"

cat $TMPCONFIGDIR/*.xml >> "$tmpoutfile"
printf "</docservconfig>\n" >> "$tmpoutfile"

debug "written $tmpoutfile"


# check for uniqueness of productid values (which we can't do before
# stitching the file together)

productids=$(cat "$tmpoutfile" | xmlstarlet sel -t -v '//@productid' | sort)
uniqueproductids=$(echo -e "$productids" | sort -u)

[[ ! "$productids" == "$uniqueproductids" ]] && \
    out \
      "(global check): Some productid values in $input_dir are not unique. Check for the following productid values: "$(comm -2 -3 <(echo -e "$productids") <(echo -e "$uniqueproductids") | tr '\n' ' ')"."

referencecheck=$(xsltproc $references_stylesheet "$tmpoutfile")
[[ "$referencecheck" ]] && add_multiple_issues "(global check)" "$referencecheck"

# if [[ "$issuelist" ]]; then
#  out "The following issues occurred when validating:$issuelist\n"
# fi

cd - >/dev/null


if [[ $simplify_config == 1 ]]; then
  xsltproc $simplify_stylesheet "$tmpoutfile" > $output_file
  # TODO: rm "$tmpoutfile" 2>/dev/null || true
elif [[ "$output_file" ]]; then
  cp "$tmpoutfile" "$output_file"
fi

# env_parallel --end-session
# [[ -e $TMPCONFIGDIR ]] && rm -rf "$TMPCONFIGDIR"