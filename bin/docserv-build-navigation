#! /bin/bash
# Generate navigational pages for DocServ.
#
# Mandatory parameters:
#   --stitched-config="/path/to/file.xml"    # Full docservconfig file
#                                              (non-positive version)
#   --template-dir="/path/to/templates"
#   --cache-dir="/var/cache/docserv/target"  # Document metadata cache directory
#                                              as generated by docserv script
#   --output-dir="/path/to/output"           # Where to output HTML files
#   --ui-languages="en-us de-de"             # Languages that are supported
#                                              by the UI templates
#   --omit-lang-path="en-us"                 # Allows omitting the path
#                                              component to the default page
#                                              language
#   --internal-mode                          # Enable features that are not
#                                              supposed to be shown publically
#   --product                                # Product to build UI for
#   --docset                                 # Docset to build UI for
#   --base_path                              # Relative path to the root of the
#                                              docserv2 directory on the host
#   --htaccess                               # Absolute path to .htaccess file
#                                              to copy into the root of the
#                                              output directory
#
# Optional parameters:
#   --help                                   # Show this help screen

out() {
  >&2 echo -e "$1"
  exit 1
}


me=$(test -L $(realpath $0) && readlink $(realpath $0) || echo $(realpath $0))
mydir=$(dirname $me)

source $mydir/docserv-dirs

app_help() {
  sed -rn '/#!/{n; p; :loop n; p; /^[ \t]*$/q; b loop}' $me | sed -r -e 's/^# ?//' -e "s/\\\$0/$(basename $0)/"
  exit
}

xsltproc='xsltproc'
xmllint='xmllint'
jing='jing'
starlet='xmlstarlet'

stylesheet=$share_dir/build-navigation/build-navigation-json.xsl
docserv_js=$share_dir/build-navigation/web-resources/docservui.js
[[ ! -f $stylesheet ]] && out "Stylesheet $stylesheet does not exist.$(readme_message)"

stitched_config=

ui_languages=
omit_lang_path=
relevant_product=
relevant_docset=

template_dir=
cache_dir=
output_dir=
htaccess=
internal_mode='false'

for i in "$@"
  do
    case $i in
      -h|--help)
        app_help
      ;;
      --internal-mode)
        internal_mode='true'
      ;;
      --product=*)
        relevant_product="${i#*=}"
      ;;
      --docset=*)
        relevant_docset="${i#*=}"
      ;;
      --ui-languages=*)
        ui_languages="${i#*=}"
      ;;
      --omit-lang-path=*)
        omit_lang_path="${i#*=}"
      ;;
      --stitched-config=*)
        stitched_config="${i#*=}"
      ;;
      --template-dir=*)
        template_dir="${i#*=}"
      ;;
      --cache-dir=*)
        cache_dir="${i#*=}"
      ;;
      --output-dir=*)
        output_dir="${i#*=}"
      ;;
      --base-path=*)
        base_path="${i#*=}"
      ;;
      --htaccess=*)
        htaccess="${i#*=}"
      ;;
      *)
        unknown+="  $i\n"
      ;;
    esac
done

[[ "$unknown" ]] && \
  out "There are unknown parameters:\n$unknown"

for lang in "$ui_languages"; do
  [[ $(echo -e " $lang" | sed -r 's/( [a-z]{2}(-[a-z]{2,5})?)+//') ]] && out "Language parameter ($lang) is not in the right format."
done

for file in "$stitched_config" "$htaccess"; do
  [[ ! -f "$file" ]] && out "File $file does not exist."
done

for dir in "$cache_dir" "$template_dir" "$output_dir"; do
  [[ ! -d "$dir" ]] && out "Directory $dir does not exist."
done

allproducts=$($xsltproc $share_dir/build-navigation/list-all-products.xsl "$stitched_config")
always_update_products=$($xsltproc $share_dir/build-navigation/list-always-updateable-products.xsl "$stitched_config")

if [[ ! $(echo -e "$allproducts" | grep -oP "^${relevant_product}/${relevant_docset}\$") ]]; then
  out "Either product $relevant_product or docset $relevant_docset does not exist."
fi

[[ -n "$omit_lang_path" ]] && omit_lang_path="${omit_lang_path}/"

template_dir=$(readlink -f $template_dir)
cache_dir=$(readlink -f $cache_dir)
output_dir=$(readlink -f $output_dir)

# FIXME: the template might also have a different file extension than html/php
template_main=$template_dir/template-main.html
[[ ! -f $template_main ]] && template_main=$template_dir/template-main.php
template_product=$template_dir/template-product.html
[[ ! -f $template_product ]] && template_product=$template_dir/template-product.php
template_unsupported=$template_dir/template-unsupported.html
[[ ! -f $template_unsupported ]] && template_unsupported=$template_dir/template-unsupported.php

# FIXME: put translation to use!
#template_translation=$template_dir/translation.xml
template_resources=$template_dir/res

for file in $template_main $template_product $template_resources; do
  ([[ ! -d "$file" ]] && [[ ! -f "$file" ]]) && out "File/directory $file does not exist."
done

# CREATE DIRECTORY TREE FOR OUTPUT
temp_dir=$(mktemp -d /tmp/docserv-build-navigation-XXXXXXXX)

# Where to place the JSON data files
data_path='docserv/data'
# Where to place the template's resource files (JS, CSS, images)
res_path='docserv/res/'
for product in $allproducts; do
  mkdir -p $output_dir/$data_path/$product
  for lang in $ui_languages; do
    mkdir -p $output_dir/$lang/$product
  done
done

cache_file=$temp_dir/cache.xml
cache_files=$(find "$cache_dir" -name '*.xml')
stitched_cache='<?xml version="1.0" encoding="UTF-8"?>\n<docservcache>\n\n'
for file in $cache_files; do
  stitched_cache+=$($starlet sel -t -c "(/document|/archive)" $file)
  stitched_cache+='\n'
done
stitched_cache+='\n</docservcache>\n'
echo -e "$stitched_cache" > $cache_file

xsltproc \
  --stringparam "output_root" "$output_dir/$data_path/" \
  --stringparam "cache_file" "$cache_file" \
  --stringparam "internal_mode" "$internal_mode" \
  --stringparam "ui_languages" "$ui_languages" \
  --stringparam "product" "$relevant_product" \
  --stringparam "docset" "$relevant_docset" \
  "$stylesheet" \
  "$stitched_config"

# Clean up stray ',' characters that are extremely hard to avoid when
# generating JSON via XSLT.
json_files=$(find "$output_dir" -name '*.json')
for json_file in $json_files; do
  sed -r -e 's/\s*$//' "$json_file" | \
    tr '\n' '\r' | \
    sed -r \
      -e 's/,(\s*|\r*)([]}])/\2/g' \
      -e 's/\r\r*/\r/g' \
      -e 's/\r/\n/g' | \
    sed -n '/^\s*$/ !p' \
      > "$json_file.0"
  mv "$json_file.0" "$json_file"
done

# Clean up & then copy images, CSS, & JS resources again
rm -rf $output_dir/$res_path
mkdir -p $output_dir/$res_path
cp $docserv_js $output_dir/$res_path
cp -r $template_resources/* $output_dir/$res_path

# FIXME: we're not actually copying the template for the navigational pages
# that we build automatically (currently that'd be SUMA).
# FIXME: generate a meta http-equiv redirect page to the default docset?
for lang in $ui_languages; do

  mkdir -p $output_dir/$lang

  # FIXME: can we really assume that all files of the template have the same
  # file extension?
  ext=html
  [[ $(echo "$template_main" | grep -oP '[^.]+$') ]] && ext=$(echo "$template_main" | grep -oP '[^.]+$')

  cat $template_main | sed -r \
    -e 's%@\{\{#base_path#}}%'"${base_path}"'%g' \
    -e 's%@\{\{#base_path_res#}}%'"${base_path}${res_path}"'%g' \
    -e 's%@\{\{#template_extension#}}%'"$ext"'%g' \
    -e 's%@\{\{#ui_language#}}%'"$lang"'%g' \
    -e 's%@\{\{#omit_path_component#}}%'"$omit_lang_path"'%g' \
    > $output_dir/$lang/index.$ext

  cat $template_unsupported | sed -r \
    -e 's%@\{\{#base_path#}}%'"${base_path}"'%g' \
    -e 's%@\{\{#base_path_res#}}%'"${base_path}${res_path}"'%g' \
    -e 's%@\{\{#template_extension#}}%'"$ext"'%g' \
    -e 's%@\{\{#ui_language#}}%'"$lang"'%g' \
    -e 's%@\{\{#omit_path_component#}}%'"$omit_lang_path"'%g' \
    > $output_dir/$lang/unsupported.$ext

  for product_set in $relevant_product/$relevant_docset $always_update_products; do

    product=$(echo "$product_set" | grep -oP '^[^/]+')
    docset=$(echo "$product_set" | grep -oP '[^/]+$')

    mkdir -p $output_dir/$lang/$product_set

    cat $template_product | sed -r \
      -e 's%@\{\{#base_path#}}%'"${base_path}"'%g' \
      -e 's%@\{\{#base_path_res#}}%'"${base_path}${res_path}"'%g' \
      -e 's%@\{\{#template_extension#}}%'"$ext"'%g' \
      -e 's%@\{\{#ui_language#}}%'"$lang"'%g' \
      -e 's%@\{\{#omit_path_component#}}%'"$omit_lang_path"'%g' \
      -e 's%@\{\{#product#}}%'"$product"'%g' \
      -e 's%@\{\{#docset#}}%'"$docset"'%g' \
      > $output_dir/$lang/$product_set/index.$ext

  done

done

cp "$htaccess" "$output_dir/.htaccess"

echo "-> $output_dir"

rm -rf $temp_dir
